import pytest
import unittest.mock as mock
import io
import sys
import time
import threading
from contextlib import contextmanager
from main import main, play_game


class TestGameIntegration:
    """–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏ –ø–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É –≥—Ä–∏"""

    @pytest.mark.integration
    def test_complete_winning_game_scenario(self, capsys):
        """–ü–æ–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –≤–∏–≥—Ä–∞—à–Ω–æ—ó –≥—Ä–∏"""
        # –°–∏–º—É–ª—é—î–º–æ –ø–æ–≤–Ω—É –≥—Ä—É: 50 -> 25 -> 75 -> 60 -> 55 -> 58 -> 57 (–≤–≥–∞–¥–∞–≤)
        inputs = ['50', '25', '75', '60', '55', '58', '57']

        with mock.patch('random.randint', return_value=57), \
                mock.patch('builtins.input', side_effect=inputs):
            play_game()
            captured = capsys.readouterr()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –µ—Ç–∞–ø–∏ –≥—Ä–∏
            assert "–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ–Ω—å–∫–µ!" in captured.out
            assert "–ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ!" in captured.out
            assert "–í–Ü–¢–ê–Ñ–ú–û! –í–ò –í–ì–ê–î–ê–õ–ò!" in captured.out
            assert "–ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ: 57" in captured.out

    @pytest.mark.integration
    def test_complete_losing_game_scenario(self, capsys):
        """–ü–æ–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –ø—Ä–æ–≥—Ä–∞—à–Ω–æ—ó –≥—Ä–∏"""
        # 7 –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±
        losing_inputs = ['1', '2', '3', '4', '5', '6', '7']

        with mock.patch('random.randint', return_value=50), \
                mock.patch('builtins.input', side_effect=losing_inputs):
            play_game()
            captured = capsys.readouterr()

            assert "–°–ü–†–û–ë–ò –ó–ê–ö–Ü–ù–ß–ò–õ–ò–°–¨!" in captured.out
            assert "–ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ –±—É–ª–æ: 50" in captured.out
            assert captured.out.count("–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ–Ω—å–∫–µ!") == 7

    @pytest.mark.integration
    def test_multiple_games_session(self, capsys):
        """–¢–µ—Å—Ç —Å–µ—Å—ñ—ó –∑ –∫—ñ–ª—å–∫–æ–º–∞ —ñ–≥—Ä–∞–º–∏"""
        game_inputs = [
            # –ü–µ—Ä—à–∞ –≥—Ä–∞: –≤–≥–∞–¥—É—î–º–æ 30 –∑–∞ 2 —Å–ø—Ä–æ–±–∏
            '20', '30',
            # –ó–∞–ø–∏—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É –≥—Ä—É
            '—Ç–∞–∫',
            # –î—Ä—É–≥–∞ –≥—Ä–∞: –≤–≥–∞–¥—É—î–º–æ 80 –∑–∞ 3 —Å–ø—Ä–æ–±–∏
            '50', '90', '80',
            # –í—ñ–¥–º–æ–≤–∞ –≤—ñ–¥ —Ç—Ä–µ—Ç—å–æ—ó –≥—Ä–∏
            '–Ω—ñ'
        ]

        with mock.patch('random.randint', side_effect=[30, 80]), \
                mock.patch('builtins.input', side_effect=game_inputs):
            main()
            captured = capsys.readouterr()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –±—É–ª–æ –¥–≤—ñ –≥—Ä–∏
            assert captured.out.count("–í–Ü–¢–ê–Ñ–ú–û! –í–ò –í–ì–ê–î–ê–õ–ò!") == 2
            assert "–ü–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ—ó –≥—Ä–∏!" in captured.out
            assert "–î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É! –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!" in captured.out


class TestGamePerformance:
    """–¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""

    @pytest.mark.slow
    def test_game_startup_performance(self):
        """–¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–∞–ø—É—Å–∫—É –≥—Ä–∏"""
        start_time = time.time()

        with mock.patch('random.randint', return_value=50), \
                mock.patch('builtins.input', return_value='50'), \
                mock.patch('sys.stdout', new_callable=io.StringIO):
            play_game()

        execution_time = time.time() - start_time
        # –ì—Ä–∞ –ø–æ–≤–∏–Ω–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è —à–≤–∏–¥–∫–æ (–º–µ–Ω—à–µ 1 —Å–µ–∫—É–Ω–¥–∏)
        assert execution_time < 1.0

    @pytest.mark.slow
    def test_multiple_games_memory_usage(self):
        """–¢–µ—Å—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –ø—Ä–∏ –±–∞–≥–∞—Ç—å–æ—Ö —ñ–≥—Ä–∞—Ö"""
        import tracemalloc

        tracemalloc.start()

        # –°–∏–º—É–ª—é—î–º–æ 10 —à–≤–∏–¥–∫–∏—Ö —ñ–≥–æ—Ä
        for i in range(10):
            with mock.patch('random.randint', return_value=50), \
                    mock.patch('builtins.input', return_value='50'), \
                    mock.patch('sys.stdout', new_callable=io.StringIO):
                play_game()

        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –ø—ñ–∫ –ø–∞–º'—è—Ç—ñ —Ä–æ–∑—É–º–Ω–∏–π (–º–µ–Ω—à–µ 10MB)
        assert peak < 10 * 1024 * 1024


class TestErrorHandling:
    """–¢–µ—Å—Ç–∏ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫"""

    @pytest.mark.integration
    def test_keyboard_interrupt_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é"""

        def interrupt_input(*args, **kwargs):
            raise KeyboardInterrupt()

        with mock.patch('builtins.input', side_effect=interrupt_input), \
                pytest.raises(KeyboardInterrupt):
            play_game()

    @pytest.mark.integration
    def test_eof_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ EOF –ø–æ–º–∏–ª–∫–∏"""

        def eof_input(*args, **kwargs):
            raise EOFError()

        with mock.patch('builtins.input', side_effect=eof_input), \
                pytest.raises(EOFError):
            play_game()

    def test_invalid_input_recovery(self, capsys):
        """–¢–µ—Å—Ç –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è"""
        # –ë–∞–≥–∞—Ç–æ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è
        inputs = [
            '',  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
            ' ',  # –¢—ñ–ª—å–∫–∏ –ø—Ä–æ–±—ñ–ª
            'abc123',  # –ó–º—ñ—à–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
            '12.5',  # –î–µ—Å—è—Ç–∫–æ–≤–µ —á–∏—Å–ª–æ
            '-50',  # –í—ñ–¥'—î–º–Ω–µ —á–∏—Å–ª–æ
            '150',  # –ü–æ–∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º
            '50'  # –ù–∞—Ä–µ—à—Ç—ñ –≤–∞–ª—ñ–¥–Ω–µ
        ]

        with mock.patch('random.randint', return_value=50), \
                mock.patch('builtins.input', side_effect=inputs):
            play_game()
            captured = capsys.readouterr()

            assert "–í–Ü–¢–ê–Ñ–ú–û! –í–ò –í–ì–ê–î–ê–õ–ò!" in captured.out
            assert "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ!" in captured.out
            assert "–ß–∏—Å–ª–æ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100!" in captured.out


class TestGameLogicEdgeCases:
    """–¢–µ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ —ñ–≥—Ä–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏"""

    @pytest.mark.integration
    def test_boundary_numbers_guessing(self):
        """–¢–µ—Å—Ç –≤–≥–∞–¥—É–≤–∞–Ω–Ω—è –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö —á–∏—Å–µ–ª"""
        # –¢–µ—Å—Ç –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞
        with mock.patch('random.randint', return_value=1), \
                mock.patch('builtins.input', return_value='1'), \
                mock.patch('sys.stdout', new_callable=io.StringIO) as mock_out:
            play_game()
            output = mock_out.getvalue()
            assert "–í–Ü–¢–ê–Ñ–ú–û! –í–ò –í–ì–ê–î–ê–õ–ò!" in output
            assert "–ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ: 1" in output

        # –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞
        with mock.patch('random.randint', return_value=100), \
                mock.patch('builtins.input', return_value='100'), \
                mock.patch('sys.stdout', new_callable=io.StringIO) as mock_out:
            play_game()
            output = mock_out.getvalue()
            assert "–í–Ü–¢–ê–Ñ–ú–û! –í–ò –í–ì–ê–î–ê–õ–ò!" in output
            assert "–ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ: 100" in output

    @pytest.mark.integration
    def test_optimal_strategy_simulation(self, capsys):
        """–°–∏–º—É–ª—è—Ü—ñ—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ—à—É–∫—É"""
        target = 73

        # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ—à—É–∫—É
        optimal_guesses = ['50', '75', '62', '69', '72', '74', '73']


        with mock.patch('random.randint', return_value=target), \
                mock.patch('builtins.input', side_effect=optimal_guesses):
            play_game()
            captured = capsys.readouterr()

            assert "–í–Ü–¢–ê–Ñ–ú–û! –í–ò –í–ì–ê–î–ê–õ–ò!" in captured.out
            assert f"–ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ: {target}" in captured.out
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ 7 —Å–ø—Ä–æ–± (–º–∞–∫—Å–∏–º—É–º –¥–ª—è –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ—à—É–∫—É –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 1-100)
            assert "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±: 7" in captured.out


class TestConcurrency:
    """–¢–µ—Å—Ç–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ (—è–∫—â–æ –≥—Ä–∞ —Ä–æ–∑—à–∏—Ä—é—î—Ç—å—Å—è)"""

    @pytest.mark.slow
    def test_multiple_simultaneous_games(self):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ—á–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –∫—ñ–ª—å–∫–æ—Ö —ñ–≥–æ—Ä"""
        results = []

        def run_game():
            with mock.patch('random.randint', return_value=50), \
                    mock.patch('builtins.input', return_value='50'), \
                    mock.patch('sys.stdout', new_callable=io.StringIO) as mock_out:
                play_game()
                results.append("–í–Ü–¢–ê–Ñ–ú–û! –í–ò –í–ì–ê–î–ê–õ–ò!" in mock_out.getvalue())

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ 5 —ñ–≥–æ—Ä –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        threads = []
        for _ in range(5):
            thread = threading.Thread(target=run_game)
            threads.append(thread)
            thread.start()

        # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—Ç–æ–∫—ñ–≤
        for thread in threads:
            thread.join(timeout=5.0)  # 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤—Å—ñ —ñ–≥—Ä–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —É—Å–ø—ñ—à–Ω–æ
        assert len(results) == 5
        assert all(results)


class TestDataValidation:
    """–¢–µ—Å—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö"""

    @pytest.mark.integration
    def test_unicode_input_handling(self, capsys):
        """–¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ Unicode —Å–∏–º–≤–æ–ª—ñ–≤"""
        unicode_inputs = [
            '‰∫îÂçÅ',  # –ö–∏—Ç–∞–π—Å—å–∫—ñ —Ü–∏—Ñ—Ä–∏
            'Ÿ•Ÿ†',  # –ê—Ä–∞–±—Å—å–∫—ñ —Ü–∏—Ñ—Ä–∏
            '–ø—è—Ç—å–¥–µ—Å—è—Ç',  # –¢–µ–∫—Å—Ç
            'üéØ',  # –ï–º–æ–¥–∑—ñ
            '50'  # –ù–æ—Ä–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ
        ]

        with mock.patch('random.randint', return_value=50), \
                mock.patch('builtins.input', side_effect=unicode_inputs):
            play_game()
            captured = capsys.readouterr()

            assert "–í–Ü–¢–ê–Ñ–ú–û! –í–ò –í–ì–ê–î–ê–õ–ò!" in captured.out
            assert "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ!" in captured.out

    def test_very_long_input(self, capsys):
        """–¢–µ—Å—Ç –¥—É–∂–µ –¥–æ–≤–≥–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è"""
        long_input = 'a' * 10000  # 10k —Å–∏–º–≤–æ–ª—ñ–≤
        valid_input = '50'

        with mock.patch('random.randint', return_value=50), \
                mock.patch('builtins.input', side_effect=[long_input, valid_input]):
            play_game()
            captured = capsys.readouterr()

            assert "–í–Ü–¢–ê–Ñ–ú–û! –í–ò –í–ì–ê–î–ê–õ–ò!" in captured.out
            assert "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ!" in captured.out


class TestGameStateConsistency:
    """–¢–µ—Å—Ç–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ —Å—Ç–∞–Ω—É –≥—Ä–∏"""

    @pytest.mark.integration
    def test_attempt_counter_accuracy(self, capsys):
        """–¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Å–ø—Ä–æ–±"""
        inputs = ['10', '20', '30', '40', '50']

        with mock.patch('random.randint', return_value=50), \
                mock.patch('builtins.input', side_effect=inputs):
            play_game()
            captured = capsys.readouterr()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–± –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            for i in range(1, 6):  # 5 —Å–ø—Ä–æ–±
                assert f"–°–ø—Ä–æ–±–∞ {i}/7" in captured.out

            assert "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±: 5" in captured.out

    @pytest.mark.integration
    def test_remaining_attempts_display(self, capsys):
        """–¢–µ—Å—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö —Å–ø—Ä–æ–±"""
        inputs = ['10', '20', '30', '–≤–∏—Ö—ñ–¥']  # 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Å–ø—Ä–æ–±–∏

        with mock.patch('random.randint', return_value=50), \
                mock.patch('builtins.input', side_effect=inputs):
            play_game()
            captured = capsys.readouterr()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö —Å–ø—Ä–æ–±: 6, 5, 4
            assert "–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: 6" in captured.out
            assert "–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: 5" in captured.out
            assert "–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: 4" in captured.out


class TestUserExperienceScenarios:
    """–¢–µ—Å—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É"""

    @pytest.mark.integration
    def test_frustrated_user_scenario(self, capsys):
        """–°—Ü–µ–Ω–∞—Ä—ñ–π —Ä–æ–∑—á–∞—Ä–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –±–∞–≥–∞—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        inputs = [
            'abc', 'xyz', '-10', '200', '0.5',
            'quit'  # –ù–∞—Ä–µ—à—Ç—ñ –≤–∏—Ö–æ–¥–∏—Ç—å
        ]

        with mock.patch('random.randint', return_value=50), \
                mock.patch('builtins.input', side_effect=inputs):
            play_game()
            captured = capsys.readouterr()

            assert "–î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É! –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!" in captured.out
            assert "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ!" in captured.out
            assert "–ß–∏—Å–ª–æ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100!" in captured.out

    @pytest.mark.integration
    def test_perfectionist_user_scenario(self, capsys):
        """–°—Ü–µ–Ω–∞—Ä—ñ–π –ø–µ—Ä—Ñ–µ–∫—Ü—ñ–æ–Ω—ñ—Å—Ç–∞ (–≤–≥–∞–¥—É—î –∑ –ø–µ—Ä—à–æ—ó —Å–ø—Ä–æ–±–∏)"""
        with mock.patch('random.randint', return_value=42), \
                mock.patch('builtins.input', return_value='42'):
            play_game()
            captured = capsys.readouterr()

            assert "–ù–µ–π–º–æ–≤—ñ—Ä–Ω–∞ —É–¥–∞—á–∞!" in captured.out
            assert "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±: 1" in captured.out

    @pytest.mark.integration
    def test_persistent_user_scenario(self, capsys):
        """–°—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∞–ø–æ–ª–µ–≥–ª–∏–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –¥–æ –∫—ñ–Ω—Ü—è
        inputs = ['10', '20', '30', '40', '50', '60', '70']  # 7 —Å–ø—Ä–æ–±, –Ω–µ –≤–≥–∞–¥–∞–≤

        with mock.patch('random.randint', return_value=80), \
                mock.patch('builtins.input', side_effect=inputs):
            play_game()
            captured = capsys.readouterr()

            assert "–°–ü–†–û–ë–ò –ó–ê–ö–Ü–ù–ß–ò–õ–ò–°–¨!" in captured.out
            assert "–ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ –±—É–ª–æ: 80" in captured.out


@pytest.fixture
def game_session():
    """–§—ñ–∫—Å—Ç—É—Ä–∞ –¥–ª—è —ñ–≥—Ä–æ–≤–æ—ó —Å–µ—Å—ñ—ó"""

    class GameSession:
        def __init__(self):
            self.games_played = 0
            self.games_won = 0
            self.total_attempts = 0

    return GameSession()


class TestSessionStatistics:
    """–¢–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—ñ—ó (—Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ)"""

    def test_session_tracking(self, game_session):
        """–¢–µ—Å—Ç –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—ñ—ó"""
        # –¶–µ–π —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—É—î —è–∫ –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –≥—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é

        # –°–∏–º—É–ª—é—î–º–æ –∫—ñ–ª—å–∫–∞ —ñ–≥–æ—Ä
        game_results = [
            (True, 3),  # –í–∏–≥—Ä–∞–≤ –∑–∞ 3 —Å–ø—Ä–æ–±–∏
            (False, 7),  # –ü—Ä–æ–≥—Ä–∞–≤ –∑–∞ 7 —Å–ø—Ä–æ–±
            (True, 1),  # –í–∏–≥—Ä–∞–≤ –∑–∞ 1 —Å–ø—Ä–æ–±—É
        ]

        for won, attempts in game_results:
            game_session.games_played += 1
            game_session.total_attempts += attempts
            if won:
                game_session.games_won += 1

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        assert game_session.games_played == 3
        assert game_session.games_won == 2
        assert game_session.total_attempts == 11

        win_rate = game_session.games_won / game_session.games_played
        avg_attempts = game_session.total_attempts / game_session.games_played

        assert win_rate == pytest.approx(0.667, rel=1e-2)
        assert avg_attempts == pytest.approx(3.667, rel=1e-2)


class TestAccessibility:
    """–¢–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ"""

    @pytest.mark.integration
    def test_screen_reader_friendly_output(self, capsys):
        """–¢–µ—Å—Ç –≤–∏–≤–æ–¥—É, –¥—Ä—É–∂–Ω—å–æ–≥–æ –¥–æ —Å–∫—Ä—ñ–Ω-—Ä—ñ–¥–µ—Ä—ñ–≤"""
        with mock.patch('random.randint', return_value=50), \
                mock.patch('builtins.input', return_value='50'):
            play_game()
            captured = capsys.readouterr()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –æ–ø–∏—Å–æ–≤–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç—ñ–ª—å–∫–∏ –µ–º–æ–¥–∑—ñ
            assert "–í—ñ—Ç–∞—î–º–æ —É –≥—Ä—ñ" in captured.out
            assert "–°–ø—Ä–æ–±–∞ 1/7" in captured.out
            assert "–í–Ü–¢–ê–Ñ–ú–û! –í–ò –í–ì–ê–î–ê–õ–ò!" in captured.out

    def test_clear_instructions(self, capsys):
        """–¢–µ—Å—Ç —á—ñ—Ç–∫–æ—Å—Ç—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π"""
        with mock.patch('random.randint', return_value=50), \
                mock.patch('builtins.input', return_value='50'):
            play_game()
            captured = capsys.readouterr()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —á—ñ—Ç–∫–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
            assert "–ü—Ä–∞–≤–∏–ª–∞:" in captured.out
            assert "–ö–æ–º–ø'—é—Ç–µ—Ä –∑–∞–≥–∞–¥–∞–≤ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100" in captured.out
            assert "–£ –≤–∞—Å —î 7 —Å–ø—Ä–æ–±" in captured.out


# –ú–∞—Ä–∫–µ—Ä–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤
pytestmark = [
    pytest.mark.integration,
]

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç—ñ–ª—å–∫–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤
    pytest.main([
        "-v",
        "--tb=short",
        "-m", "integration",
        __file__
    ])